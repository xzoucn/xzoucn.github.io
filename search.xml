<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[Vertica 安装]]></title>
    <url>%2F2019%2F03%2F15%2FVertica-%E5%AE%89%E8%A3%85%2F</url>
    <content type="text"><![CDATA[标准安装原料 CentOS Linux release 7.5.1804 vertica-9.2.0-0.x86_64.RHEL6.rpm 安装切换到root权限1su 安装dialog依赖1yum install dialog -y 安装下载的rpm安装包1rpm -ivh vertica-9.2.0-0.x86_64.RHEL6.rpm 上一步完成后会提示需要通过install_vertica程序来继续完成安装12345678910111213141516Vertica Analytic Database V9.2.0-0 successfully installed on host host1To complete your NEW installation and configure the cluster, run: /opt/vertica/sbin/install_verticaTo complete your Vertica UPGRADE, run: /opt/vertica/sbin/update_vertica---------------------------------------------------------------------------------- Important---------------------------------------------------------------------------------- Before upgrading Vertica, you must backup your database. After you restart your database after upgrading, you cannot revert to a previous Vertica software version.---------------------------------------------------------------------------------- View the latest Vertica documentation at http://my.vertica.com/docs/ install_vertica的用法123456789101112用法: # 安装或更新: install_vertica --hosts host1,host2,host3 --rpm vertica.rpm install_vertica --hosts 192.168.1.101,192.168.1.101,192.168.1.102 \ --rpm vertica.rpm # 添加或删除节点 install_vertica --add-hosts host4 --rpm vertica.rpm install_vertica --remove-hosts host4 # 获取帮助 install_vertica --help 完成安装配置（待续）1install_vertica --hosts host1,host2,host3 --rpm vertica.rpm Docker安装标准安装对于软硬件有诸多依赖，通过Docker镜像安装则提供了一种开箱即用的安装方式。下面我们将一步步来通过Docker安装Vertica 安装yum-utils、device-mapper-persistent-data、lvm2123sudo yum install -y yum-utils \ device-mapper-persistent-data \ lvm2 配置配置docker yum repo123sudo yum-config-manager \ --add-repo \ https://download.docker.com/linux/centos/docker-ce.repo 通过yum安装docker-ce1sudo yum install docker-ce 启动docker服务1sudo systemctl start docker 拉取docker镜像1docker pull jbfavre/vertica:8.1.1-11_debian-8 运行docker镜像，映射内外端口、持久化存储123docker run -p 5433:5433 -d \ -v /data01/docker-vertica/data:/home/dbadmin/docker \ jbfavre/vertica:8.1.1-11_debian-8 获取vsql客户端1wget https://www.vertica.com/client_drivers/8.1.x/8.1.1-13/vertica-client-8.1.1-13.x86_64.rpm 安装vsql客户端1rpm -ivh vertica-client-8.1.1-13.x86_64.rpm 运行客户端1/opt/vertica/bin/vsql -U dbadmin]]></content>
      <categories>
        <category>数据库</category>
      </categories>
      <tags>
        <tag>vertica</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[MongoDB数据类型]]></title>
    <url>%2F2019%2F03%2F13%2FMongoDB%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B%2F</url>
    <content type="text"><![CDATA[MongoDB通过BSON（Binary JSON）来描述和存放数据。BSON是一种可进行二进制序列化的，类JSON格式的文档对象。通过BSON，MongoDB可以方便地存储无模式（scheme）数据。 类型 编号 别名 说明 Double 1 “double” String 2 “string” Object 3 “object” Array 4 “array” Binary data 5 “binData” Undefined 6 “undefined” Deprecated. ObjectId 7 “objectId” Boolean 8 “bool” Date 9 “date” Null 10 “null” Regular Expression 11 “regex” DBPointer 12 “dbPointer” Deprecated. JavaScript 13 “javascript” Symbol 14 “symbol” Deprecated. JavaScript (with scope) 15 “javascriptWithScope” 32-bit integer 16 “int” Timestamp 17 “timestamp” 64-bit integer 18 “long” Decimal128 19 “decimal” New in version 3.4. Min key -1 “minKey” Max key 127 “maxKey” ObjectId具有12字节的唯一标识。MongoDB中，每条记录都有一个类似关系型数据库主键标识的_id字段来标识此条记录，如果没有设定文档记录的_id值，则通过ObjectId来生成_id。其具体组成如下： 4字节，Unix的时间戳 5字节，随机数值 3字节，计数器，从随机的起始值开始 StringBSON的字符串编码为UTF-8，UTF-8可以更好地支持各种语言文字，一般每种编程语言的MongoDB驱动会帮助处理字符串编码以符合要求。 TimestampsBSON中的时间戳比较特别，他并不能直接对应到Date类型，而是通过如下方式组织64位数据： 前32位是从Unix纪元（1970.1.1）开始计算到现在时间的秒数 后32位是一秒内的操作序数在一个单实例MongoDB中，时间戳是唯一的。如果对一个一级timestamp类型字段插入了空值，MongoDB会将空值替换成当前时间戳（从2.6版开始，之前的版本只会替换前两个字段）。 DateBSON日期是一个64位的字段类型，存放了从Unix纪元（1970.1.1）开始计算的毫秒数计数时间。BSON日期是有符号类型的，负值代表1970.1.1之前的时间。]]></content>
      <categories>
        <category>数据库</category>
      </categories>
      <tags>
        <tag>MongoDB</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[MongoDB基本操作 - Mongo Shell]]></title>
    <url>%2F2019%2F03%2F13%2FMongoDB%E5%9F%BA%E6%9C%AC%E6%93%8D%E4%BD%9C-Mongo-Shell%2F</url>
    <content type="text"><![CDATA[Mongo Shell提供了交互式的MongoDB操作体验，通过Mongo Shell我们可以方便地进行查询验证及学习。本篇我们将通过Mongo Shell来进行MongoDB基本操作介绍。 文档插入12345678db.inventory.insertOne( &#123; item: "canvas", qty: 100, tags: ["cotton"], size: &#123; h: 28, w: 35.5, uom: "cm" &#125; &#125;) // 单条插入db.inventory.insertMany([ &#123; item: "journal", qty: 25, tags: ["blank", "red"], size: &#123; h: 14, w: 21, uom: "cm" &#125; &#125;, &#123; item: "mat", qty: 85, tags: ["gray"], size: &#123; h: 27.9, w: 35.5, uom: "cm" &#125; &#125;, &#123; item: "mousepad", qty: 25, tags: ["gel", "blue"], size: &#123; h: 19, w: 22.85, uom: "cm" &#125; &#125;]) //多条插入 文档查询 - 基础初始化查询记录1234567 db.inventory.insertMany([ &#123; item: "journal", qty: 25, size: &#123; h: 14, w: 21, uom: "cm" &#125;, status: "A" &#125;, &#123; item: "notebook", qty: 50, size: &#123; h: 8.5, w: 11, uom: "in" &#125;, status: "A" &#125;, &#123; item: "paper", qty: 100, size: &#123; h: 8.5, w: 11, uom: "in" &#125;, status: "D" &#125;, &#123; item: "planner", qty: 75, size: &#123; h: 22.85, w: 30, uom: "cm" &#125;, status: "D" &#125;, &#123; item: "postcard", qty: 45, size: &#123; h: 10, w: 15.25, uom: "cm" &#125;, status: "A" &#125;]); 查询语句12345678910db.inventory.find( &#123;&#125; ) //所有记录db.inventory.find( &#123; status: "D" &#125; ) //status是“D”的记录db.inventory.find( &#123; status: &#123; $in: [ "A", "D" ] &#125; &#125; ) //status是“A”或“D”的记录db.inventory.find( &#123; status: "A", qty: &#123; $lt: 30 &#125; &#125; ) //status是“A”并且qty小于30的记录db.inventory.find( &#123; $or: [ &#123; status: "A" &#125;, &#123; qty: &#123; $lt: 30 &#125; &#125; ] &#125; ) //status是“A”或者qty小于30的记录db.inventory.find( &#123; status: "A", $or: [ &#123; qty: &#123; $lt: 30 &#125; &#125;, &#123; item: /^p/ &#125; ]&#125; ) //status是“A”，并且qty小于30或item以p开头db.inventory.find( &#123; "size.h": &#123; $lt: 15 &#125;, "size.uom": "in", status: "D" &#125; ) //size.h小于15，size.uom是“in”并且status是“D” 文档查询 - 数组初始化查询记录1234567db.inventory.insertMany([ &#123; item: "journal", qty: 25, tags: ["blank", "red"], dim_cm: [ 14, 21 ] &#125;, &#123; item: "notebook", qty: 50, tags: ["red", "blank"], dim_cm: [ 14, 21 ] &#125;, &#123; item: "paper", qty: 100, tags: ["red", "blank", "plain"], dim_cm: [ 14, 21 ] &#125;, &#123; item: "planner", qty: 75, tags: ["blank", "red"], dim_cm: [ 22.85, 30 ] &#125;, &#123; item: "postcard", qty: 45, tags: ["blue"], dim_cm: [ 10, 15.25 ] &#125;]); 查询语句12345678db.inventory.find( &#123; tags: ["red", "blank"] &#125; ) //tags数组为 ["red", "blank"] 的记录db.inventory.find( &#123; tags: &#123; $all: ["red", "blank"] &#125; &#125; ) //tags数组包含“red”和“blank”的记录db.inventory.find( &#123; tags: "red" &#125; ) //tags包含“red”的记录db.inventory.find( &#123; dim_cm: &#123; $gt: 25 &#125; &#125; ) //dim_cm包含大于25的元素的记录db.inventory.find( &#123; dim_cm: &#123; $gt: 15, $lt: 20 &#125; &#125; ) //dim_cm包含大于15的元素，并且包含小于20的元素的记录db.inventory.find( &#123; dim_cm: &#123; $elemMatch: &#123; $gt: 22, $lt: 30 &#125; &#125; &#125; ) //dim_cm包含大于22同时小于30的元素的记录db.inventory.find( &#123; "dim_cm.1": &#123; $gt: 25 &#125; &#125; ) //dim_cm第二个元素大于25的记录db.inventory.find( &#123; "tags": &#123; $size: 3 &#125; &#125; ) //tags有三个元素的记录 文档查询 - 文档元素数组初始化查询记录1234567db.inventory.insertMany( [ &#123; item: "journal", instock: [ &#123; warehouse: "A", qty: 5 &#125;, &#123; warehouse: "C", qty: 15 &#125; ] &#125;, &#123; item: "notebook", instock: [ &#123; warehouse: "C", qty: 5 &#125; ] &#125;, &#123; item: "paper", instock: [ &#123; warehouse: "A", qty: 60 &#125;, &#123; warehouse: "B", qty: 15 &#125; ] &#125;, &#123; item: "planner", instock: [ &#123; warehouse: "A", qty: 40 &#125;, &#123; warehouse: "B", qty: 5 &#125; ] &#125;, &#123; item: "postcard", instock: [ &#123; warehouse: "B", qty: 15 &#125;, &#123; warehouse: "C", qty: 35 &#125; ] &#125;]); 查询语句12345678db.inventory.find( &#123; "instock": &#123; warehouse: "A", qty: 5 &#125; &#125; ) //instock中包含元素为 &#123; warehouse: "A", qty: 5 &#125;并且顺序相同的记录db.inventory.find( &#123; "instock": &#123; qty: 5, warehouse: "A" &#125; &#125; ) //顺序不相同，不能查询到记录！！！db.inventory.find( &#123; 'instock.qty': &#123; $lte: 20 &#125; &#125; ) //instock中存在一个元素的qty属性小于等于20的记录db.inventory.find( &#123; 'instock.0.qty': &#123; $lte: 20 &#125; &#125; ) //instock中第一个元素的qty属性小于等于20的记录db.inventory.find( &#123; "instock": &#123; $elemMatch: &#123; qty: 5, warehouse: "A" &#125; &#125; &#125; ) //instock存在一个元素包含属性qty、warehouse，qty等于5并且warehouse是“A”的记录db.inventory.find( &#123; "instock": &#123; $elemMatch: &#123; qty: &#123; $gt: 10, $lte: 20 &#125; &#125; &#125; &#125; ) //instock存在一个元素包含qty，qty大于10并且小于等于20db.inventory.find( &#123; "instock.qty": &#123; $gt: 10, $lte: 20 &#125; &#125; ) //instock中任意一个元素的qty属性大于10并且任意一个元素的属性小于等于20db.inventory.find( &#123; "instock.qty": 5, "instock.warehouse": "A" &#125; ) //instock中存在元素的qty属性等于5并且instock中存在元素的属性warehouse为‘A’ 文档查询 - 投影初始化查询记录1234567db.inventory.insertMany( [ &#123; item: "journal", status: "A", size: &#123; h: 14, w: 21, uom: "cm" &#125;, instock: [ &#123; warehouse: "A", qty: 5 &#125; ] &#125;, &#123; item: "notebook", status: "A", size: &#123; h: 8.5, w: 11, uom: "in" &#125;, instock: [ &#123; warehouse: "C", qty: 5 &#125; ] &#125;, &#123; item: "paper", status: "D", size: &#123; h: 8.5, w: 11, uom: "in" &#125;, instock: [ &#123; warehouse: "A", qty: 60 &#125; ] &#125;, &#123; item: "planner", status: "D", size: &#123; h: 22.85, w: 30, uom: "cm" &#125;, instock: [ &#123; warehouse: "A", qty: 40 &#125; ] &#125;, &#123; item: "postcard", status: "A", size: &#123; h: 10, w: 15.25, uom: "cm" &#125;, instock: [ &#123; warehouse: "B", qty: 15 &#125;, &#123; warehouse: "C", qty: 35 &#125; ] &#125;]); 查询语句12345678910111213db.inventory.find( &#123; status: "A" &#125;, &#123; item: 1, status: 1 &#125; ) //status是“A”的记录，返回字段_id、item、statusdb.inventory.find( &#123; status: "A" &#125;, &#123; item: 1, status: 1, _id: 0 &#125; ) //status是“A”的记录，返回字段item、statusdb.inventory.find( &#123; status: "A" &#125;, &#123; status: 0, instock: 0 &#125; ) //status是“A”的记录，返回status、instock以外的所有字段db.inventory.find( &#123; status: "A" &#125;, &#123; item: 1, status: 1, "size.uom": 1 &#125;) //status是“A”的纪录，返回字段_id、item、status、uom(size下面的属性)db.inventory.find( &#123; status: "A" &#125;, &#123; "size.uom": 0 &#125;) //status是“A”的记录，返回uom(size下面的属性)以外的所有字段db.inventory.find( &#123; status: "A" &#125;, &#123; item: 1, status: 1, "instock.qty": 1 &#125; ) //status是“A”的纪录，返回字段_id、item、status、qty(instock数组下面的元素的属性)db.inventory.find( &#123; status: "A" &#125;, &#123; item: 1, status: 1, instock: &#123; $slice: -1 &#125; &#125; ) //status是“A”的纪录，返回字段_id、item、status、instock数组下最后一条记录。数组投影只能使用$elemMatch、$slice、$。 文档查询 - 空值初始化查询记录1234db.inventory.insertMany([ &#123; _id: 1, item: null &#125;, &#123; _id: 2 &#125;]) 查询语句123db.inventory.find( &#123; item: null &#125; ) //查询item为null或item不存在的记录db.inventory.find( &#123; item : &#123; $type: 10 &#125; &#125; ) //查询item为BSON null的记录db.inventory.find( &#123; item : &#123; $exists: false &#125; &#125; ) //查询item不存在的记录 文档更新初始化查询记录123456789101112db.inventory.insertMany( [ &#123; item: "canvas", qty: 100, size: &#123; h: 28, w: 35.5, uom: "cm" &#125;, status: "A" &#125;, &#123; item: "journal", qty: 25, size: &#123; h: 14, w: 21, uom: "cm" &#125;, status: "A" &#125;, &#123; item: "mat", qty: 85, size: &#123; h: 27.9, w: 35.5, uom: "cm" &#125;, status: "A" &#125;, &#123; item: "mousepad", qty: 25, size: &#123; h: 19, w: 22.85, uom: "cm" &#125;, status: "P" &#125;, &#123; item: "notebook", qty: 50, size: &#123; h: 8.5, w: 11, uom: "in" &#125;, status: "P" &#125;, &#123; item: "paper", qty: 100, size: &#123; h: 8.5, w: 11, uom: "in" &#125;, status: "D" &#125;, &#123; item: "planner", qty: 75, size: &#123; h: 22.85, w: 30, uom: "cm" &#125;, status: "D" &#125;, &#123; item: "postcard", qty: 45, size: &#123; h: 10, w: 15.25, uom: "cm" &#125;, status: "A" &#125;, &#123; item: "sketchbook", qty: 80, size: &#123; h: 14, w: 21, uom: "cm" &#125;, status: "A" &#125;, &#123; item: "sketch pad", qty: 95, size: &#123; h: 22.85, w: 30.5, uom: "cm" &#125;, status: "A" &#125;] ); 更新语句123456789101112131415161718db.inventory.updateOne( &#123; item: "paper" &#125;, &#123; $set: &#123; "size.uom": "cm", status: "P" &#125;, $currentDate: &#123; lastModified: true &#125; &#125;) //更新item为“paper”的单条记录，$set更新对应字段值，$currentDate用于更新lastModified字段（不存在则创建）db.inventory.updateMany( &#123; "qty": &#123; $lt: 50 &#125; &#125;, &#123; $set: &#123; "size.uom": "in", status: "P" &#125;, $currentDate: &#123; lastModified: true &#125; &#125;) //3.2开始支持，更新qty小于50的多条记录，$set更新对应字段值，$currentDate用于更新lastModified字段（不存在则创建）db.inventory.replaceOne( &#123; item: "paper" &#125;, &#123; item: "paper", instock: [ &#123; warehouse: "A", qty: 60 &#125;, &#123; warehouse: "B", qty: 40 &#125; ] &#125;) //用第二个文档对象替换item是“paper”的对象 文档删除初始化查询记录1234567db.inventory.insertMany( [ &#123; item: "journal", qty: 25, size: &#123; h: 14, w: 21, uom: "cm" &#125;, status: "A" &#125;, &#123; item: "notebook", qty: 50, size: &#123; h: 8.5, w: 11, uom: "in" &#125;, status: "P" &#125;, &#123; item: "paper", qty: 100, size: &#123; h: 8.5, w: 11, uom: "in" &#125;, status: "D" &#125;, &#123; item: "planner", qty: 75, size: &#123; h: 22.85, w: 30, uom: "cm" &#125;, status: "D" &#125;, &#123; item: "postcard", qty: 45, size: &#123; h: 10, w: 15.25, uom: "cm" &#125;, status: "A" &#125;,] ); 删除语句123db.inventory.deleteMany(&#123;&#125;) //删除所有记录db.inventory.deleteMany(&#123; status : "A" &#125;) //删除status是“A”的多条记录db.inventory.deleteOne( &#123; status: "D" &#125; ) //删除status是“D”的第一条记录 聚合 - 管道管道方式聚合时，多个聚合运算分布于管道上。每一步聚合运算完成后将结果交给下一步的聚合运算继续处理，以此类推。聚合运算的基本过程如下图所示。 通过以上操作，我们看到可以通过Mongo Shell方便地对MongoDB进行日常维护操作。MongoDB的查询主要通过查询方法加上查询文档体来实现，这对于理解MongoDB第三方客户端的使用具有重要的指导意义。]]></content>
      <categories>
        <category>数据库</category>
      </categories>
      <tags>
        <tag>MongoDB</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[货币战争]]></title>
    <url>%2F2019%2F03%2F13%2F%E8%B4%A7%E5%B8%81%E6%88%98%E4%BA%89%2F</url>
    <content type="text"><![CDATA[终于看完了这书，作者全篇的议论与观察面相当独到，可能很多人都不会去以这样的角度来思索这个金融无处不在的世界。 这本书论述的时间跨度达到两百年之久，很多的事件看起来如同小说一般引人入胜。虽然很多是从历史表象来进行推论，但可以看到这些推论所要回答的问题本身就充满谜团，所以也不失其作为真实答案的可能性。 虽然不是所有的银行家都如此阴险，但只要银行家是个人，那么对于利益的追求恐怕就是难以避免的，加之其所从事的行业本身就一直在做着这样的事。银行如何获取收益，就是放贷。即便这种放贷形势可谓是五花八门，但最根本的就是放贷，获取利息收入。所以如果没有贷款需要，银行自然也就会没落。银行家自然不甘只做小生意，要玩就玩大的，而债务货币，也就是现代货币给他们提供了这种可能性。原因很简单，纸币制造相当之廉价，没有金银那样的开采难度。制造的廉价性恰恰是恶性通胀的罪魁祸首。通胀会使财富向少数人迅速集中，而这少数人自然毫无悬念就是拥有货币发行权的人了。 战争以及各种现象的背后是对银本位和金本位的相继抹杀，大力推举债务货币，最终受苦的自然是数量庞大的普通百姓了。那么百姓如何与如此强大的对手抗争来获得自己应有的权利呢，从本质出发，作者给出了答案，那就是恢复金银本位制。这样才能逃过国际银行家们对全球的残酷剥削，人民才有财产自由，才有话语权。究其原因，金银的开采并非如同债务货币般想印多少就印多少，所以国际银行家门想从这上来制造吸血通道的难度相对要大得多。 我很欣赏作者的审视观点，让我了解到了一些现象的内因。但同时对于结论，我以为恢复金银本位恐怕很困难，毕竟人们的生产力由于工业化比过去大大提高，如果用金银来做货币，那流通起来就相当不方便了。加之其实紧缩与通胀依然存在，就看劳动成果总量与金银熟多熟少了。相反如果能运用合理的策略来引导货币健康稳定地发展，那真是两全齐美之事，但这需要所有货币发行者有着强有力的信誉与自我约束能力，这应该算得上是一个不小的挑战了。]]></content>
      <categories>
        <category>杂文</category>
      </categories>
      <tags>
        <tag>随笔</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[凤凰项目笔记]]></title>
    <url>%2F2019%2F03%2F13%2F%E5%87%A4%E5%87%B0%E9%A1%B9%E7%9B%AE%E7%AC%94%E8%AE%B0%2F</url>
    <content type="text"><![CDATA[凤凰项目是关于一家汽车零部件生产商，在IT转型阵痛期所发生的一系列故事。我们能够看到当IT几近失败边缘之时，主人公比尔是如何一步步扭转战局，帮助公司摆脱困境的。具体故事建议感兴趣的可以去浏览下这本书，比尔所使用的方法论可以简要归纳如下： ##三步工作法 ###一、建立正向工作流程正向工作流需要是单向及高效的，需要找到约束点，通过各种手段放大约束点的能力。通过小批量处理的方式减少半成品的积压，降低流程中缺陷流向下游的可能性，持续改进，提高效率。 ###一、建立持续反馈工作流程反向工作流程往往是影响正常工作流程效率的诱因，因此需要给予足够多的关注。我们需要着眼于减少反向流程发生率，同时需要通过一些手段对反向流程进行优化，以降低反向流程的代价，减少其对正常流程的影响，降低风险，提高工作流程健康度。 ###一、建立不断尝试和训练的企业文化营造勇于创新、敢于冒险、高信任度的文化。将至少20%的时间分配给非功能性需求，并不断鼓励进行改进。 ##四种工作类型从IT运维的角度看，工作类型大体可以分为如下四种: ###一、业务项目业务项目即公司最常见的业务举措，一般归属于项目管理办公室。它所反映的是公司最直接的业务需要。 ###二、IT内部项目IT内部项目通常指除了业务项目外，自行发起的一些项目。可能是由业务项目衍生出的基础架构及运维改进等等。它所反映的是IT内部对于正常推进业务项目的附属需要。 ###三、变更通常由业务项目或IT内部项目引发。一切对系统正常运行可能造成影响的动作均可以认为是变更，一般常见的变更如业务系统升级、硬件维护、安全加固等等。它所反映的是系统不断演进发展以及维持系统正常运行的需要。 ###四、计划外工作未列入计划的工作，例如故障或事故，通常由前三点所产生。计计划外工作不会产生收益，且会对正常工作产生副作用。它所反映的是工作中的非可预见区以及混乱点，我们需要警惕计划外工作产生的负面影响。 ##其他 ###可视化管理通过可视化的手段来监测工作过程中的各个状态，如利用看板进行工作项的管理。可视化管理可以让我们能够直观地了解项目情况，对项目的健康情况进行检查，在必要时进行干预。 ###等待时间 等待时间=忙碌百分比/空闲百分比 当忙碌百分比超过80%时，等待时间将发生迅速增长。因此我们需要对忙碌百分比较高的资源提高关注，特别是有关资源是否是工作流中的关键约束点。 ###开发运维的价值开发运维通过自动化、小批量、高频率的手段提高了IT从开发到生产环境流程的响应效率。通过流程整合，减少了整合前流程中各个步骤出现问题的可能性。这样，系统变得更易于改动及可靠，重大风险因被分散而更为可控。企业能够快速响应用户需求，并通过短的交付周期快速得到投资收益。 ##思考 工作并不是越忙碌越好，忙碌同时也意味着等待队列变长，工作流程随时可能崩溃。 流程是用来保护人员，提高效率的工具。 必要时冻结次要任务，专注于减少主要任务的半成品。改进流程，提高效率后，再考虑按照重要程度逐步放开其它任务。 永远关注于和核心目标相关的任务，减少无关任务的干扰。]]></content>
      <categories>
        <category>项目管理</category>
      </categories>
      <tags>
        <tag>Agile</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[批量修改文件名]]></title>
    <url>%2F2019%2F03%2F13%2F%E6%89%B9%E9%87%8F%E4%BF%AE%E6%94%B9%E6%96%87%E4%BB%B6%E5%90%8D%2F</url>
    <content type="text"><![CDATA[闲来无事，正好需要批量修改一些文件的名字。一个简单的实现如下： set objfso=createobject(“scripting.filesystemobject”)set objfiles=objfso.getfolder(“.”).files for each objfile in objfiles &nbsp;&nbsp;&nbsp;&nbsp;newname = replace(objfile.name,”[APTX4869]”,””) &nbsp;&nbsp;if objfile.name &lt;&gt; newname then &nbsp;&nbsp;&nbsp;&nbsp;objfile.name = newname &nbsp;&nbsp;end ifnextset objfiles=nothingset objfso=nothing 橙色部分根据自己的修改规则进行替换。在记事本中另存为vbs，拷贝到相应目录下执行即可。]]></content>
      <categories>
        <category>VB</category>
      </categories>
      <tags>
        <tag>VB</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[CSS透明度设置]]></title>
    <url>%2F2019%2F03%2F13%2FCSS%E9%80%8F%E6%98%8E%E5%BA%A6%E8%AE%BE%E7%BD%AE%2F</url>
    <content type="text"><![CDATA[.transparent_class {&nbsp; &nbsp;&nbsp; &nbsp;filter:alpha(opacity=50);&nbsp; &nbsp;&nbsp; &nbsp;-moz-opacity:0.5;&nbsp; &nbsp;&nbsp; &nbsp;-khtml-opacity: 0.5;&nbsp; &nbsp;&nbsp; &nbsp;opacity: 0.5;} opacity: 0.5; 当前的标准属性 . 大部分版本的Firefox, Safari 和 Opera都可以使用。filter:alpha(opacity=50); 适用于IE。-moz-opacity:0.5; 适用于老版本的Mozilla 浏览器如Netscape Navigator。-khtml-opacity: 0.5; 适用于老版本的 Safari (1.x)，它采用KTHML而不是WebKit。]]></content>
      <categories>
        <category>CSS</category>
      </categories>
      <tags>
        <tag>CSS</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[collate的用处]]></title>
    <url>%2F2019%2F03%2F13%2Fcollate%E7%9A%84%E7%94%A8%E5%A4%84%2F</url>
    <content type="text"><![CDATA[在多记录集Union时，发生了错误，由于排序集的不同而产生冲突。 一般说来数据库均会采用默认的排序集，因此不会产生这种问题，但自行建立的临时表则可能出现例外。今天正好遇到的就是这个问题。为了让各种记录集之间的排序统一，可以在创建临时表的同时指定数据库默认的排序规则： CREATE TABLE #Mytable(&nbsp;&nbsp;&nbsp;&nbsp;MyField COLLATE DATABASE_DEFAULT nvarchar（150）) 这样为临时表指定了数据库的默认排序规则，在SQL中需要用到排序规则来处理的地方就不会由于口径不一而发生错误了。]]></content>
      <categories>
        <category>SQL</category>
      </categories>
      <tags>
        <tag>TSQL</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[N在SQL中的用处]]></title>
    <url>%2F2019%2F03%2F13%2FN%E5%9C%A8SQL%E4%B8%AD%E7%9A%84%E7%94%A8%E5%A4%84%2F</url>
    <content type="text"><![CDATA[使用SQL Server在插入翻译数据时，在页面上显示出来却全是问号。乱码应该是字符编码的问题，所以如果能控制插入数据库字符串的编码就可以解决这个问题。这时就需要用到N了，采用形如： INSERT INTO TableName(ColumnName)VALUES(N’My translation string’) 注意到黑体的部分，在字符串前面加上N的标识，让数据库处理这条字符串的时候使用Unicode编码方式。这样即便是不同的语言也可以正确显示出来，而不至于在处理中使用默认的编码导致字符串误解码。 由于数据库在处理英文的时候不会暴露出这个问题，往往容易被忽视。通常加上这个标识是最好的，不过我们常常会忽视这个标识。所以一旦遇到此类问题，考虑用‘N’则问题便可解决了。]]></content>
      <categories>
        <category>数据库</category>
      </categories>
      <tags>
        <tag>TSQL</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[PHP 学习手记 - 变量和常量]]></title>
    <url>%2F2019%2F03%2F13%2FPHP-%E5%AD%A6%E4%B9%A0%E6%89%8B%E8%AE%B0-%E5%8F%98%E9%87%8F%E5%92%8C%E5%B8%B8%E9%87%8F%2F</url>
    <content type="text"><![CDATA[PHP是弱类型语言，并不需要在给变量初始化值前定义变量类型。解析器会由变量具体的赋值来判断变量的具体类型。PHP基本数据类型包括： Integer Float String Boolean Array Object 两个特殊类型为： NULL resource PHP特别提供了可变变量，也就是变量名是一个变量的变量，一般定义如： $varname = ‘myvar’;$$varname = 10;等价于$myvar = 10； 常量的定义类似于 C，常量一般用大写且不需要$符号，定义一个常量 define(‘NUMBER’,100); 使用这个常量 echo NUMBER; PHP中重要的全局变量包括： $GLOBALS$_SERVER$_GET$_POST$_COOKIE$_FILES$_ENV$_REQUEST 包括 $_GET，$_POST，$_COOKIE 的输入内容$_SESSION]]></content>
      <categories>
        <category>PHP</category>
      </categories>
      <tags>
        <tag>PHP</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[PHP 学习手记 - 字符串]]></title>
    <url>%2F2019%2F03%2F13%2FPHP-%E5%AD%A6%E4%B9%A0%E6%89%8B%E8%AE%B0-%E5%AD%97%E7%AC%A6%E4%B8%B2%2F</url>
    <content type="text"><![CDATA[初始化字符串主要有两种方式： $myString = ‘my text’;$myOutput = “$myString more text.”; 单引号和双引号的区别在于单引号不发生interpolation，而双引号则需要: $myOutput = ‘$myString more text.’ 将输出： $myString more text.$myOutput = “$myString more text.” 将输出 ：my text more text. 字符串可以使用‘.’来做链接操作： $CombinedString = ‘my text’ 等价于 $CombinedString = ‘my’.’text’ 还有一种创建多行字符串的方法，称为heredoc echo &lt;&lt;&lt;line oneline twoline threetheEnd &lt;&lt;&lt;后接定义的结束标记，在输入完内容后接结束标记，需要留心结束标记不能出现在文本内容中，否则会导致系统语法匹配第一个结束位置。以上的例子创建了一个三行字符串。]]></content>
      <categories>
        <category>PHP</category>
      </categories>
      <tags>
        <tag>PHP</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[配置Windows+Apache+Mysql+PHP开发运行环境]]></title>
    <url>%2F2019%2F03%2F13%2F%E9%85%8D%E7%BD%AEWindows-Apache-Mysql-PHP%E5%BC%80%E5%8F%91%E8%BF%90%E8%A1%8C%E7%8E%AF%E5%A2%83%2F</url>
    <content type="text"><![CDATA[安装Apache 获取Apache Server 下载。 这个是包括了open ssl 模块的window可执行程序，直接运行安装到我们需要放置的目录下面。注意使用80端口，这样不必额外制定端口号就可以访问本地Http Server了。 一切安装好后，打开浏览器，输入http://localhost进行测试，出现“It Works”那么安装就成功了。 安装Mysql 获取 Mysql下载。 安装 Mysql，这个是打包好了的安装包，一路根据提示安装上即可。 另外还有一个Mysql Workbench，这个是一个可视化的Mysql管理软件，可以一同下下来或者选用别的顺手的管理客户端均可。 用管理客户端链接本地的Mysql，能连接上说明安装成功。 安装PHP 获取 PHP 下载。可以看到多个版本供我们选择： 如果Apache的版本是1或2，那么下载VC6编译的版本 如果选用IIS作为Server，那么使用VC9编译的版本 X86代表32位的操作系统，X64则代表64位操作系统 Thread Safe和Non Thread Safe,取决于Web Server对PHP的执行方式。如果是ISAPI,需要调用dll来处理用户请求，由于处理完后相关dll不会马上消失，所以需要进行线程安全检查以使用多线程，从而提高效率，使用Thread Safe较好。如果是Fast CGI,由于只进行单线程的运行，因此没必要进行线程并发下的安全性检查，去掉线程安全检查等于取消不必要的系统耗费从而提高运行速度，使用 Non Thread Safe的较好。 这里也有直接的安装包，直接安装即可，但我们选择ZIP包进行手工安装，一来手工安装更灵活，二来可以了解PHP的内部结构，这个对于以后进一步使用PHP来说比较重要哦。 将压缩包解压到你的目标磁盘目录，如解压后的目录类似C:\php，注意目录间最好不用空格，由于有的Web Server可能不支持带空格的路径。 配置php5ts.dll路劲的环境变量。在根目录下面有些dll含有Web Server的名字，这些相关的Server模块可以让Web Server运行PHP时更加高效。所有的模块都需要用到php5ts.dll，因此需要让系统知道他的位置，查找顺序一般为： php.exe的执行位置，或者Web Server的执行目录（一般为bin）如果Web Server使用了server模块。 环境变量PATH下包含的路径。 把当前的根目录加到PATH下，这样无论Web Server如何配置，系统都可以寻找到php5ts.dll 配置PHP初始化信息，直接把php.ini-production复制后改名为php.ini即可，PHP运行时会自动查找并读取php.ini文件。另外如果使用Windows NT, 2000, XP 或 2003上的NTFS格式，确保运行Web Server的用户对php.ini有读取的权限。 关联PHP和Apache,此配置后Apache便具有PHP的解析能力。这里有两种方式去设置PHP与Apache的协同工作。一种是作为CGI，另一种是作为Apache的模块来安装，上面提到Server模块更好，因此我采用这种方式安装，将以下三行加入Apache的httpd.conf中即可。 LoadModule php5_module “c:/php/php5apache2_2.dll”AddType application/x-httpd-php .phpPHPIniDir “C:/php” 集成检测 最后来检查下我们的环境是否正常工作。 新建一个文本名称加扩展名为test.ini。 在文件中添加如下代码： &lt;?phpphpinfo();?&gt; 将其放到Apache Server的htdocs目录下。 接着在浏览器中输入http://localhost/test.php,如果出现了PHP的版本及组件相关统计信息，说明正常工作了。其中mysqlnd为enable说明Mysql的驱动也正常启用了。 这样一个WAMP环境就搭建起来了，这个环境是进行开发与学习的基础，就先介绍到这里了。]]></content>
      <categories>
        <category>PHP</category>
      </categories>
      <tags>
        <tag>PHP</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Hello World]]></title>
    <url>%2F2019%2F03%2F12%2Fhello-world%2F</url>
    <content type="text"><![CDATA[Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post1$ hexo new "My New Post" More info: Writing Run server1$ hexo server More info: Server Generate static files1$ hexo generate More info: Generating Deploy to remote sites1$ hexo deploy More info: Deployment]]></content>
  </entry>
</search>
